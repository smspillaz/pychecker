
PyChecker is a tool for finding common bugs in python source code.
It finds problems that are typically caught by a compiler for less
dynamic languages, like C and C++.  Because of the dynamic nature
of python, some warnings may be incorrect; however,
spurious warnings should be fairly infrequent.

PyChecker works in a combination of ways.  First, it imports each
module.  If there is an import error, the module cannot be processed.
The import provides some basic information about the module.  The code
for each function, class, and method is checked for possible problems.

Types of problems that can be found include:

  * No doc strings in modules, classes, functions, and methods
  * self not the first parameter to a method
  * Wrong number of parameters passed to functions/methods
  * No global found (e.g., using a module without importing it)
  * Global not used (module or variable)
  * Local variable not used

To use PyChecker, pass the python source files you want to check on
the command line:

	python $PY_CHECKER_HOME/checker.py file1.py file2.py ...

If there are import dependencies in your source files, you should
import those files first on the command line in order to get as many
files checked as possible.

In all further examples, $PY_CHECKER_HOME is assumed to be pychecker.

PyChecker works with Python 1.5.2, 2.0, and 2.1.

To look at a little example, you can use the test files included:

	python pychecker/checker.py test_input/*.py

If you want to change the default behaviour, you can pass command line options
or define a .pycheckrc file.  For an example, look at pycheckrc.

To show the available options, do:

	python pychecker/checker.py -h

If you find a bug in PyChecker, meaning you see something like:

	python pychecker/checker.py myfile.py

	myfile.py:13 INTERNAL ERROR -- STOPPED PROCESSING FUNCTION --
        Traceback (most recent call last):
          File "./pychecker/warn.py", line 364, in _checkFunction
            stack, oparg, lastLineNum)
          File "./pychecker/warn.py", line 195, in _handleFunctionCall
            kwArgs.append(stack[i].data)
        IndexError: list index out of range

Please send mail indicating the version of PyChecker, 
the line of code *from your source file* which broke PyChecker 
(myfile.py:13 in the example above), and the traceback.

Good Luck!  As always, feedback is greatly appreciated.

Neal
pychecker@metaslash.com

PyChecker can be found on SourceForge at:
	http://sourceforge.net/projects/pychecker
	http://pychecker.sourceforge.net/

